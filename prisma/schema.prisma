// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @unique @default(cuid())
  firstname               String
  lastname                String?
  email                   String        @unique
  password                String
  phone                   String?
  bio                     String?
  linkedIn                String?
  twitter                 String?
  newsletter_subscription Boolean       @default(false)
  events                  Event[]
  transaction             Transaction[]
  wishlist                Wishlist[]
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt
}

model Event {
  id                String        @id @default(cuid())
  title             String
  type              String
  category          String
  description       String
  price             Int
  total_tickets     Int?
  tickets_sold      Int
  date              DateTime
  time_frame        Json
  images            String[]
  location          Location[]
  organizer_details Organizer[]
  creatorId         String
  creator           User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  transaction       Transaction[]
  wishlist          Wishlist[]
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now()) @updatedAt
  isDeleted         Boolean       @default(false)
}

model Location {
  id      String @id @default(cuid())
  venue   String
  city    String
  country String
  eventId String @unique
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Organizer {
  id      String @id @default(cuid())
  phone   String
  email   String
  eventId String @unique
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Transaction {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  eventId        String?
  event          Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
  amount         Int
  ticket_details Ticket[]
  created_at     DateTime @default(now())
}

model Ticket {
  id              String      @id @default(cuid())
  transactionId   String
  transaction     Transaction @relation(fields: [transactionId], references: [id])
  ticket_quantity Int
  ticket_category String
  ticket_price    Int
  attendee        Attendee[]
  payment_type    String
}

model Attendee {
  id       String @id @default(cuid())
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  name     String
  age      Int
}

model Wishlist {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  eventId String?
  event   Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  addedAt DateTime @default(now())
}
